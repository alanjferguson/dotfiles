#!/usr/bin/env bash

# Define ANSI colour codes
GREEN='\033[0;32m'
CYAN='\033[0;36m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
BOLD='\033[1m'
NC='\033[0m'  # No Colour

# Function to print a banner message
print_banner() {
    local message="$1"
    local border=$(printf '%*s' "${#message}" '' | tr ' ' '=')
    echo -e "\n${CYAN}${border}${NC}"
    echo -e "${YELLOW}${message}${NC}"
    echo -e "${CYAN}${border}${NC}\n"
}

# Function to print a warning message
print_warning() {
    echo -e "\n${RED}${BOLD}WARNING:${NC} $1\n"
}

# Get the real path of the script, resolving any symlinks
get_script_dir() {
    local source="${BASH_SOURCE[0]}"
    while [ -h "$source" ]; do
        local dir="$(cd -P "$(dirname "$source")" && pwd)"
        source="$(readlink "$source")"
        [[ $source != /* ]] && source="$dir/$source"
    done
    dir="$(cd -P "$(dirname "$source")" && pwd)"
    echo "$dir"
}

# Check if the repository is owned by the current user
check_repo_ownership() {
    local script_dir="$(get_script_dir)"
    local repo_owner="$(stat -f '%Su' "$script_dir")"
    
    if [ "$repo_owner" != "$(whoami)" ]; then
        print_warning "This dotfiles repository (at $script_dir) is owned by '$repo_owner'"
        print_warning "Please clone the repository into your own home directory and run this script from there"
        exit 1
    fi
}

# Run the stow command for the passed in directory ($2) in location $1
stowit() {
  usr=$1
  app=$2
  echo -e "${BOLD}${YELLOW}Stowing ${app}${NC}"
  # -v verbose
  # --adopt so we can pull in existing changes
  # --dotfiles convert dot-foo to .foo
  # -R recursive
  # -t target
  stow -v --adopt --dotfiles -R -t "${usr}" "${app}"
  echo ""
}

# Run the unstow command for the passed in directory ($2) in location $1
unstowit() {
  usr=$1
  app=$2
  echo -e "${BOLD}${YELLOW}Unstowing ${app}${NC}"
  # -v verbose
  # --dotfiles convert dot-foo to .foo
  # -D delete
  # -t target
  stow -v --dotfiles -D -t "${usr}" "${app}"
  echo ""
}

# Process all apps in the current directory
process_apps() {
  local func=$1
  
  for app in */; do
    if [ -d "$app" ]; then
      $func "${HOME}" "$(basename "$app")"
    fi
  done
}

# Show usage information
show_usage() {
  echo "Usage: $0 [stow|unstow]"
  echo "  stow   - Create symlinks for all configurations (default)"
  echo "  unstow - Remove symlinks for all configurations"
  exit 1
}

# Main script logic
if [[ $# -gt 1 ]]; then
  show_usage
fi

# Check repository ownership before proceeding
check_repo_ownership

action=${1:-show_usage}

case $action in
  stow)
    print_banner "Stowing dotfiles for user: $(whoami)"
    process_apps stowit
    print_banner "Stowing complete"
    ;;
    
  unstow)
    print_banner "Unstowing dotfiles for user: $(whoami)"
    process_apps unstowit
    print_banner "Unstowing complete"
    ;;
    
  *)
    show_usage
    ;;
esac
